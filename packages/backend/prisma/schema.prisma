generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

// ===== USER MANAGEMENT MODELS =====

model User {
  id          String      @id @default(cuid())
  address     String      @unique  // Wallet address
  email       String?     @unique  // From social login
  role        UserRole    @default(CONSUMER)
  status      UserStatus  @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  profile              UserProfile?
  roleApplications     RoleApplication[]
  adminActionsPerformed AdminAction[] @relation("AdminUser")
  adminActionsReceived  AdminAction[] @relation("TargetUser")
  reviewedApplications RoleApplication[] @relation("AdminReviewer")
  
  // Conservation & Supply Chain Relations
  conservationRecords  ConservationRecord[]
  supplyChainRecords   SupplyChainRecord[]
  stageHistoryEntries  SupplyChainStageHistory[]

  @@map("users")
}

model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  firstName       String?
  lastName        String?
  organization    String?
  licenseNumber   String?
  phoneNumber     String?
  profileImage    String?  // IPFS hash
  bio             String?
  location        String?
  website         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model RoleApplication {
  id              String            @id @default(cuid())
  userId          String
  requestedRole   UserRole
  status          ApplicationStatus @default(PENDING)
  
  // Application Details
  organization    String?
  licenseNumber   String?
  businessType    String?
  experience      String?           // Years of experience
  motivation      String?           // Why they want this role
  
  // Documents (IPFS hashes)
  documents       String[]          // Array of IPFS hashes
  
  // Admin Review
  reviewedBy      String?           // Admin user ID
  adminFeedback   String?
  reviewedAt      DateTime?
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer User? @relation("AdminReviewer", fields: [reviewedBy], references: [id])

  @@map("role_applications")
}

model AdminAction {
  id          String   @id @default(cuid())
  adminId     String   // Who performed the action
  targetId    String?  // Who/what was affected (nullable)
  action      String   // Action type (APPROVE_ROLE, REJECT_APPLICATION, etc.)
  description String?  // Detailed description
  metadata    Json?    // Additional action metadata
  createdAt   DateTime @default(now())

  // Relations
  admin  User @relation("AdminUser", fields: [adminId], references: [id])
  target User? @relation("TargetUser", fields: [targetId], references: [id])

  @@map("admin_actions")
}

// ===== CONSERVATION MODULE MODELS =====

model ConservationRecord {
  id                   String   @id @default(cuid())
  samplingId           String   @unique  // Unique sampling identifier
  userId               String   // Researcher who created this record
  
  // Core Data (stored as JSON for flexibility)
  locationData         Json     // GPS, water body, environmental conditions
  speciesData          Json     // Species info, counts, measurements
  samplingData         Json     // Methods, duration, gear specs
  labTests             Json?    // Array of lab test results
  
  // File Management
  fileHashes           String[] // IPFS hashes of uploaded files
  
  // Additional Information
  researcherNotes      String?
  weatherConditions    String?
  tidalConditions      String?
  
  // Status and Verification
  status               String   @default("DRAFT")
  dataHash             String?  // IPFS hash of complete data
  blockchainHash       String?  // Blockchain transaction hash
  
  // Verification Info
  verifiedAt           DateTime?
  verifiedBy           String?  // Admin user ID who verified
  verificationNotes    String?
  
  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes for better performance
  @@index([userId])
  @@index([status])
  @@index([samplingId])
  @@index([createdAt])
  @@map("conservation_records")
}

// ===== SUPPLY CHAIN MODULE MODELS =====

model SupplyChainRecord {
  id                   String   @id @default(cuid())
  productId            String   @unique  // Unique product identifier
  userId               String   // User who created this record
  batchId              String?  // Batch identifier for grouping
  
  // Product Information
  sourceType           String   // FARMED or WILD_CAPTURE
  speciesName          String
  productName          String?
  productDescription   String?
  
  // Stage-specific Data (stored as JSON for flexibility)
  hatcheryData         Json?    // For farmed products
  growOutData          Json?    // For farmed products
  harvestData          Json?    // For both farmed and wild
  fishingData          Json?    // For wild-capture products
  processingData       Json?    // Processing stage data
  distributionData     Json?    // Distribution stage data
  retailData           Json?    // Retail stage data
  
  // Current Status
  currentStage         String   // Current stage in supply chain
  productStatus        String   @default("ACTIVE") // ACTIVE, RECALLED, EXPIRED, SOLD
  
  // Quality and Certifications
  certifications       String[] // Array of certification names
  qualityMetrics       Json?    // Quality scores and metrics
  
  // File Management
  fileHashes           String[] // IPFS hashes of uploaded files
  
  // Sustainability and Public Access
  sustainabilityScore  Float?   // 0-100 sustainability score
  isPublic             Boolean  @default(false) // Whether publicly traceable
  tags                 String[] // Product tags for categorization
  
  // Blockchain Integration
  dataHash             String?  // IPFS hash of complete data
  blockchainHash       String?  // Blockchain transaction hash
  
  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  user                 User @relation(fields: [userId], references: [id], onDelete: Cascade)
  stageHistory         SupplyChainStageHistory[]
  ConsumerFeedback     ConsumerFeedback[]
  
  // Indexes for better performance
  @@index([userId])
  @@index([productId])
  @@index([sourceType])
  @@index([currentStage])
  @@index([isPublic])
  @@index([createdAt])
  @@map("supply_chain_records")
}

model SupplyChainStageHistory {
  id          String   @id @default(cuid())
  productId   String   // Reference to supply chain record
  userId      String   // User who made this stage update
  
  // Stage Information
  stage       String   // Stage name (HATCHERY, PROCESSING, etc.)
  location    String?  // Where this stage occurred
  timestamp   DateTime @default(now())
  
  // Stage Data
  notes       String?  // Notes about this stage
  data        Json?    // Stage-specific data
  fileHashes  String[] // IPFS hashes of files for this stage
  
  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  supplyChainRecord SupplyChainRecord @relation(fields: [productId], references: [productId], onDelete: Cascade)
  
  @@index([productId])
  @@index([userId])
  @@index([timestamp])
  @@map("supply_chain_stage_history")
}

// ===== CONSUMER FEEDBACK MODEL =====

model ConsumerFeedback {
  id                String   @id @default(cuid())
  productId         String   // Reference to supply chain record
  
  // Feedback Content
  rating            Int      // 1-5 star rating
  comment           String?  // Optional written review
  
  // Consumer Information (optional)
  consumerEmail     String?
  consumerName      String?
  
  // Purchase Information
  purchaseLocation  String?
  purchaseDate      DateTime?
  
  // Moderation
  verified          Boolean  @default(false)
  status            String   @default("PENDING") // PENDING, APPROVED, REJECTED
  moderatedBy       String?  // Admin who moderated
  moderatedAt       DateTime?
  moderationNotes   String?
  
  // Additional Data
  metadata          Json?    // Additional feedback metadata
  
  // Timestamps
  createdAt         DateTime @default(now())
  
  // Relations
  supplyChainRecord SupplyChainRecord @relation(fields: [productId], references: [productId], onDelete: Cascade)
  
  @@index([productId])
  @@index([verified])
  @@index([status])
  @@index([createdAt])
  @@map("consumer_feedback")
}

// ===== ENUMS =====

enum UserRole {
  CONSUMER
  RESEARCHER
  FARMER
  FISHERMAN
  PROCESSOR
  TRADER
  RETAILER
  ADMIN
}

enum UserStatus {
  ACTIVE
  PENDING
  SUSPENDED
  REJECTED
  BANNED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
